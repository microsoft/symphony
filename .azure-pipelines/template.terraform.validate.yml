parameters:
  - name: goVersion
    type: string
    default: "1.18.1"
  - name: terraformVersion
    type: string
    default: "1.1.7"
  - name: envKVSVCName
    type: string
  - name: envKVName
    type: string
  - name: runLayerTest
    type: boolean
    default: true
jobs:
  - job: validate
    workspace:
      clean: resources
    displayName: "Validate"
    steps:
      - checkout: self

      - task: Bash@3
        displayName: "Setup Toolset"
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/orchestrators/scripts"
          arguments: ${{ parameters.terraformVersion }}
          bashEnvValue: "~/.profile"
          failOnStderr: true
          targetType: "inline"
          script: |
            chmod  +x ./setup-terraform.sh
            ./setup-terraform.sh ${{ parameters.terraformVersion }}
            chmod  +x ./setup-tflint.sh
            ./setup-tflint.sh
            chmod  +x ./setup-gitleaks.sh
            ./setup-gitleaks.sh

      - task: GoTool@0
        inputs:
          version: ${{ parameters.goVersion }}
          goBin: "$(System.DefaultWorkingDirectory)"

      - script: echo '##vso[task.prependpath]$(System.DefaultWorkingDirectory)'

      - task: Bash@3
        displayName: "Run gitleaks"
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/orchestrators/scripts"
          targetType: "inline"
          script: |
            echo 'create ./results directory'
            mkdir results

            source ./scanners.sh
            run_gitleaks './../../IAC/Terraform' './results/gitleaks-report' 'json' 'info'

      - task: PublishTestResults@2
        displayName: "Publish Gitleaks results"
        inputs:
          testResultsFiles: "*.json"
          searchFolder: "$(System.DefaultWorkingDirectory)/IAC/Terraform/results"
          failTaskOnFailedTests: true
          testRunTitle: "Gitleask report"
          mergeTestResults: true

      - task: Bash@3
        displayName: "Run Terraform lint"
        env:
          WORKSPACE_PATH: $(System.DefaultWorkingDirectory)
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/orchestrators/scripts"
          targetType: "inline"
          script: |
            chmod  +x ./iac.tf.lint.sh
            ./iac.tf.lint.sh

      - task: AzureKeyVault@2
        displayName: "Pull env cred from Azure Key valut"
        inputs:
          azureSubscription: ${{ parameters.envKVSVCName }}
          KeyVaultName: ${{ parameters.envKVName }}
          SecretsFilter: "*"
          RunAsPreJob: true

      - task: Bash@3
        displayName: "Run Terraform validate"
        env:
          WORKSPACE_PATH: $(System.DefaultWorkingDirectory)
          SUBID: $(SUBID)
          TENANTID: $(TENANTID)
          CLIENTID: $(CLIENTID)
          CLIENTSECRET: $(CLIENTSECRET)
          STATESTORAGEACCOUNT: $(STATESTORAGEACCOUNT)
          STATECONTAINER: $(STATECONTAINER)
          STATERG: $(STATERG)
          ENV: $(env)
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/orchestrators/scripts"
          targetType: "inline"
          script: |
            chmod +x ./iac.tf.validate.sh 
            ./iac.tf.validate.sh

      - task: Bash@3
        condition: and(succeeded(), eq('${{ parameters.runLayerTest }}', 'true'))
        displayName: "Run Layers tests"
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/orchestrators/scripts"
          targetType: "inline"
          script: |
            source ./tests.runner.sh
            azlogin $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) 'AzureCloud'

            #install junit 
            echo "install go-junit-report"
            go install github.com/jstemmer/go-junit-report@latest

            # set test vars
            export resource_group_name=$(STATERG)
            export storage_account_name=$(STATESTORAGEACCOUNT) 
            export container_name=$(STATECONTAINER)

            pushd ./../../IAC/Terraform/test/terraform         

            echo "Run tests with tag = module_tests"
            terraform module_test true

            popd

      - task: PublishTestResults@2
        condition: and(succeeded(), eq('${{ parameters.runLayerTest }}', 'true'))
        displayName: "Publish Layer tests results"
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "*.xml"
          searchFolder: "$(System.DefaultWorkingDirectory)/IAC/Terraform/test/terraform"
          failTaskOnFailedTests: true
          testRunTitle: "Terraform Layers tests"
          publishRunAttachments: true
          mergeTestResults: true
