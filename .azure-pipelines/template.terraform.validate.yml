---
parameters:
  - name: goVersion
    type: string
  - name: terraformVersion
    type: string

jobs:
  - job: Validate
    displayName: "Validate"
    workspace:
      clean: resources
    steps:
      - checkout: self

      - task: Bash@3
        displayName: "Setup Toolset"
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/scripts/orchestrators"
          arguments: ${{ parameters.terraformVersion }}
          bashEnvValue: "~/.profile"
          failOnStderr: false
          targetType: "inline"
          script: |
            set -e
            ./setup-azcli.sh
            ./setup-terraform.sh ${{ parameters.terraformVersion }}
            ./setup-tflint.sh
            ./setup-gitleaks.sh

      - task: GoTool@0
        inputs:
          version: ${{ parameters.goVersion }}
          goBin: "$(System.DefaultWorkingDirectory)"

      - script: echo '##vso[task.prependpath]$(System.DefaultWorkingDirectory)'

      - task: Bash@3
        displayName: "Run GitLeaks"
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/scripts/orchestrators"
          targetType: "inline"
          script: |
            source ./scanners.sh
            run_gitleaks './../../' 'sarif' 'info' 'true' 'true'

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: "$(System.DefaultWorkingDirectory)/scripts/orchestrators/gitleaks-report.sarif"
          artifactName: 'CodeAnalysisLogs'

      - task: Bash@3
        displayName: "Run Terraform lint"
        env:
          WORKSPACE_PATH: $(System.DefaultWorkingDirectory)
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/scripts/orchestrators"
          targetType: "filePath"
          filePath: "scripts/orchestrators/iac.tf.lint.sh"

      - task: AzureCLI@2
        displayName: 'Run Terraform validate'
        inputs:
          azureSubscription: symphony
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          addSpnToEnvironment: true
          workingDirectory: "$(System.DefaultWorkingDirectory)/scripts/orchestrators"
          inlineScript: |
            export WORKSPACE_PATH="$(System.DefaultWorkingDirectory)"
            export STATE_RG="$(stateRg)"
            export STATE_STORAGE_ACCOUNT="$(stateStorageAccount)"
            export STATE_CONTAINER="$(stateContainer)"
            export ENVIRONMENT_NAME="$(environmentName)"

            ./iac.tf.validate.sh

      - task: AzureCLI@2
        condition: and(succeeded(), eq(variables['layerTestEnabled'], 'true'))
        displayName: 'Run Layers tests'
        inputs:
          azureSubscription: symphony
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          addSpnToEnvironment: true
          workingDirectory: "$(System.DefaultWorkingDirectory)/scripts/orchestrators"
          inlineScript: |
            export WORKSPACE_PATH="$(System.DefaultWorkingDirectory)"
            export STATE_RG="$(stateRg)"
            export STATE_STORAGE_ACCOUNT="$(stateStorageAccount)"
            export STATE_CONTAINER="$(stateContainer)"
            export ENVIRONMENT_NAME="$(environmentName)"
            export TEST_TAG="module_tests"

            ./iac.tf.test.sh

      - task: PublishTestResults@2
        condition: and(succeeded(), eq(variables['layerTestEnabled'], 'true'))
        displayName: "Publish Layer tests results"
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "*.xml"
          searchFolder: "$(System.DefaultWorkingDirectory)/IAC/Terraform/test/terraform"
          failTaskOnFailedTests: true
          testRunTitle: "Terraform Layers tests"
          publishRunAttachments: true
          mergeTestResults: true
