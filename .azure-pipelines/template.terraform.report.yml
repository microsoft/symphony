parameters:
  - name: envKVSVCName
    type: string
  - name: envKVName
    type: string

jobs:
  - job: Report
    workspace:
      clean: resources
    displayName: "Report"
    dependsOn: previewDeploy

    steps:
      - checkout: self

      - task: AzureKeyVault@2
        displayName: "Pull env cred from Azure Key valut"
        inputs:
          azureSubscription: ${{ parameters.envKVSVCName }}
          KeyVaultName: ${{ parameters.envKVName }}
          SecretsFilter: "*"
          RunAsPreJob: true

      - task: Bash@3
        displayName: "backup $(ENV) state files"
        condition: eq(variables.runBackupState, 'true')
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/orchestrators/scripts"
          targetType: "inline"
          script: |
            source ./iac.tf.sh

            echo "Az login"

            azlogin $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) 'AzureCloud'
            echo "Starting backup of $(ENV) environment remote state.  Commit: $(Build.SourceVersion)}"

            # Create backup container name and convert to lower case
            backupContainerName=`echo $(Build.BuildId)-$(Build.SourceVersion) | tr '[:upper:]' '[:lower:]'`

            backupResourceGroup=`az storage account list --query "[?name=='$(BACKUPSTATESTORAGEACCOUNT)'].resourceGroup" -o tsv`

            sourceEndPoint=`az storage account list -g $(STATERG) --query "[?name=='$(STATESTORAGEACCOUNT)'].{endpointName:primaryEndpoints.blob}" -o tsv`
            backupEndpoint=`az storage account list -g $backupResourceGroup --query "[?name=='$(BACKUPSTATESTORAGEACCOUNT)'].{endpointName:primaryEndpoints.blob}" -o tsv`

            # backupstatestorageaccount
            echo "Copying remote state to container ${backupContainerName} in storage account $(BACKUPSTATESTORAGEACCOUNT) located in resource group ${backupResourceGroup}"
            az storage copy -s ${sourceEndPoint}$(STATECONTAINER)/$(ENV)/* -d ${backupEndpoint}$(STATECONTAINER)/$(ENV)/${backupContainerName} --recursive
