name: $(BuildDefinitionName).$(DayOfYear)$(Rev:.r)

trigger:
  - none

pr:
  - none

variables:
  #=============================================================#
  # The following Variables should be set on the pipeline level #
  #=============================================================#

  # Name of the Agent Pool to use
  - name: agentImage
    value: "ubuntu-latest"
  
  - name: pullRequestNumber
    value: 0

  # Commented out to use the values from the Azdo pipeline variables
  
  # ARM Service Connection Name used for environment Key Vault access
  # - name: keyVaultArmSvcConnectionName
  #   value: "Symphony-KV"

  # Environment Key Vault Name
  # - name: keyVaultName
  #   value: "kv-symphony-environments"

pool:
  vmImage: $(agentImage)

jobs:
  - job: EventInfo
    displayName: Generating event information
    steps:
      - task: Bash@3
        name: Data
        displayName: "Generate event information"
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/scripts/orchestrators"
          bashEnvValue: "~/.profile"
          failOnStderr: true
          targetType: "inline"
          script: |
            echo "##vso[task.setvariable variable=groupId;isOutput=true]PR-$(pullRequestNumber)-$(Build.Repository.Id)"
            
  - template: ./template.queryevents.yml
    parameters:
      jobName: GetEnvironments
      dependsOn: [ EventInfo ]
      pipelineName: PR
      eventName: NewEnvironment
      eventGroupId: $[ dependencies.EventInfo.outputs['Data.groupId'] ]
      keyVaultArmSvcConnectionName: $(keyVaultArmSvcConnectionName)
      keyVaultName: $(keyVaultName)

  - job: Destroy
    displayName: "Destroy"
    dependsOn: [ GetEnvironments ]
    workspace:
      clean: resources

    variables:
      newEnvironmentEventsJson: $[ dependencies.GetEnvironments.outputs['QueryEvents.events'] ]

    steps:
      - checkout: self
        fetchDepth: 0
        fetchTags: true
        persistCredentials: true

      - task: Bash@3
        displayName: "Install Azure CLI"
        inputs:
          filePath: "scripts/orchestrators/setup-azcli.sh"
          workingDirectory: "$(System.DefaultWorkingDirectory)/scripts/orchestrators"
          bashEnvValue: "~/.profile"
          failOnStderr: true

      - task: AzureKeyVault@2
        inputs:
          azureSubscription: ${{ parameters.keyVaultArmSvcConnectionName }}
          keyVaultName: ${{ parameters.keyVaultName }}
          secretsFilter: "*"
          runAsPreJob: true

      - task: Bash@3
        displayName: "Destroy environments"
        env:
          WORKSPACE_PATH: $(System.DefaultWorkingDirectory)
          RUN_ID: $(Build.BuildId)
          NEW_ENVIRONMENT_EVENTS_JSON: $(newEnvironmentEventsJson)
          ARM_SUBSCRIPTION_ID: $(subscriptionId)
          ARM_TENANT_ID: $(tenantId)
          ARM_CLIENT_ID: $(clientId)
          ARM_CLIENT_SECRET: $(clientSecret)
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/scripts/orchestrators"
          targetType: "inline"
          failOnStderr: false
          script: |
            # NEW_ENVIRONMENT_EVENTS_JSON is an array of events.
            # Each event has a Name, SHA and Location properties.
            # For each event, we want to checkout the .SHA commit, get the .Name environment name
            # and the Location of the environment, and pass it to the destroy script.

            for event in $(echo "${NEW_ENVIRONMENT_EVENTS_JSON}" | jq -c '.[]'); do
                sha=$(echo "${event}" | jq -r '.SHA')
                name=$(echo "${event}" | jq -r '.Name')
                location=$(echo "${event}" | jq -r '.Location')

                git checkout "${sha}"
                echo "Destroying environment: $name"
                export ENVIRONMENT_NAME=$name
                export LOCATION_NAME=$location

                ./iac.bicep.destroy.sh
            done
