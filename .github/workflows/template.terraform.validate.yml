---
name: "Template-TF-Validate"

on: # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      environmentName:
        type: string
        required: true
      environmentDirectory:
        type: string
        required: true
      goVersion:
        type: string
        required: true
      terraformVersion:
        type: string
        required: true
      runLayerTest:
        type: string
        required: true
      keyVaultName:
        type: string
        required: true
      branchName:
        type: string
        required: true
    secrets:
      azureEnviromentCredentials:
        required: true

jobs:
  Validate:
    name: "Validate"
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
      security-events: write
      pull-requests: write
      checks: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branchName }}

      - name: Setup Toolset
        run: |
          ./setup-azcli.sh
          ./setup-gitleaks.sh
          ./setup-terraform.sh ${{ inputs.terraformVersion }}
          ./setup-tflint.sh
          source ~/.bashrc
        working-directory: scripts/orchestrators

      - name: Run Gitleaks
        run: |
          source ./scanners.sh
          run_gitleaks './../../' 'sarif' 'info' 'true' 'true'
        working-directory: scripts/orchestrators

      - uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: gitleaks-report
          path: scripts/orchestrators/gitleaks-report.*

      - name: Upload Gitleaks SARIF report to code scanning service
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scripts/orchestrators/gitleaks-report.sarif

      - name: Run TF Lint
        env:
          WORKSPACE_PATH: ${{ github.workspace }}
        run: |
          ./iac.tf.lint.sh
        working-directory: scripts/orchestrators
        shell: bash

      - uses: Azure/login@v1
        name: Run Azure Login
        with:
          creds: "${{ secrets.azureEnviromentCredentials }}"
          environment: "AzureCloud"

      - name: Get KeyVault Secret(s)
        id: LoadSecrets
        env:
          SECRETS: "clientId, clientSecret, subscriptionId, tenantId, stateRg, stateContainer, stateStorageAccount"
          KEY_VAULT_NAME: ${{ inputs.keyVaultName }}
        run: ./github.loadsecrets.sh
        working-directory: scripts/orchestrators

      - name: Run TF Validate
        env:
          WORKSPACE_PATH: ${{ github.workspace }}
          ENVIRONMENT_NAME: ${{ inputs.environmentName }}
        run: |
          export ARM_TENANT_ID=${{ steps.LoadSecrets.outputs.tenantId }}
          export ARM_SUBSCRIPTION_ID=${{ steps.LoadSecrets.outputs.subscriptionId }}
          export ARM_CLIENT_ID=${{ steps.LoadSecrets.outputs.clientId }}
          export ARM_CLIENT_SECRET=${{ steps.LoadSecrets.outputs.clientSecret }}
          export STATE_RG=${{ steps.LoadSecrets.outputs.stateRg }}
          export STATE_STORAGE_ACCOUNT=${{ steps.LoadSecrets.outputs.stateStorageAccount }}
          export STATE_CONTAINER=${{ steps.LoadSecrets.outputs.stateContainer }}

          ./iac.tf.validate.sh
        working-directory: scripts/orchestrators
        shell: bash

      - uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.goVersion }}
      - name: Run Layer Tests
        if: ${{ inputs.runLayerTest == 'true' }}
        env:
          WORKSPACE_PATH: ${{ github.workspace }}
          ENVIRONMENT_NAME: ${{ inputs.environmentName }}
          ENVIRONMENT_DIRECTORY: ${{ inputs.environmentDirectory }}
          TEST_TAG: module_tests
        run: |
          export ARM_TENANT_ID=${{ steps.LoadSecrets.outputs.tenantId }}
          export ARM_SUBSCRIPTION_ID=${{ steps.LoadSecrets.outputs.subscriptionId }}
          export ARM_CLIENT_ID=${{ steps.LoadSecrets.outputs.clientId }}
          export ARM_CLIENT_SECRET=${{ steps.LoadSecrets.outputs.clientSecret }}
          export STATE_RG=${{ steps.LoadSecrets.outputs.stateRg }}
          export STATE_STORAGE_ACCOUNT=${{ steps.LoadSecrets.outputs.stateStorageAccount }}
          export STATE_CONTAINER=${{ steps.LoadSecrets.outputs.stateContainer }}

          ./iac.tf.test.sh

        working-directory: scripts/orchestrators
        shell: bash

      - uses: actions/upload-artifact@v3
        if: ${{ always() && inputs.runLayerTest == 'true' }}
        with:
          name: Modules test results
          path: ./IAC/Terraform/test/terraform/*.xml

      - name: Publish Module Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ inputs.runLayerTest == 'true' }}
        with:
          files: "./IAC/Terraform/test/terraform/*.xml"
          check_name: "Modules tests Results"
          action_fail: true
