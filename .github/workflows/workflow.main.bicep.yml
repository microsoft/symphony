name: "Main Bicep"

on:
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        required: true
        default: "dev"
      location:
        description: "Location"
        required: true
        default: "westus"

jobs:
  Validate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # - name: Setup Toolset
      #   run: |
      #     # ./setup-azcli.sh
      #     ./setup-gitleaks.sh
      #     # ./setup-powershell.sh
      #     # ./setup-pester.sh
      #     # ./setup-armttk.sh
      #     # ./setup-shellspec.sh
      #   working-directory: orchestrators/scripts

      # - name: Run Gitleaks
      #   run: |
      #     source ./scanners.sh
      #     run_gitleaks './../../IAC/Bicep' './' 'json' 'info'
      #   working-directory: orchestrators/scripts

      # - name: Run Bicep Lint
      #   run: |
      #     source ./iac.bicep.sh
      #     pushd .
      #     cd ./../../IAC/Bicep/bicep
      #     modules=$(find . -type f -name '*.bicep' | sort -u)

      #     SAVEIFS=$IFS
      #     IFS=$'\n'
      #     array=($modules)
      #     IFS=$SAVEIFS
      #     len=${#array[@]}
      #     for deployment in "${array[@]}"
      #       do
      #         echo "linting ${deployment}"
      #         lint "${deployment}"
      #         code=$?
      #         if [[ $code != 0 ]]; then
      #           echo "bicep linting failed - returned code ${code}"
      #           exit $code
      #         fi
      #         echo "------------------------"
      #       done
      #     popd
      #   working-directory: orchestrators/scripts

      - uses: Azure/login@v1
        name: Run Azure Login
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"

      - uses: Azure/get-keyvault-secrets@v1
        name: Get KeyVault Secrets
        with:
          keyvault: "kv-symphony-env"
          secrets: "clientid, clientsecret, subid, tenantid"
        id: KvSecrets

      - name: Run Bicep Validate
        run: |
          source ./iac.bicep.sh
          azlogin ${{ steps.KvSecrets.outputs.subid }} ${{ steps.KvSecrets.outputs.tenantid }} ${{ steps.KvSecrets.outputs.clientid }} ${{ steps.KvSecrets.outputs.clientsecret }} 'AzureCloud'
          pushd .
          cd ./../../IAC/Bicep/bicep
          modules=$(find . -type f -name 'main.bicep' | sort -u)

          SAVEIFS=$IFS
          IFS=$'\n'
          array=(${modules})
          IFS=$SAVEIFS
          len=${#array[@]}
          for deployment in "${array[@]}"
            do
              pushd .
              path=$(dirname "${deployment}")
              fileName=$(basename "${deployment}")
              cd "${path}"
              echo "bicep validating ${path}/${fileName}"

              paramFiles="${{ github.workspace }}/env/bicep/${{ github.event.inputs.environment }}/parameters.json"
              parse_bicep_parameters "${paramFiles}"

              extraFileParam="${{ github.workspace }}/env/bicep/${{ github.event.inputs.environment }}/${path//.\//}/parameters.json"
              if [[ -f "${extraFileParam}" ]]; then
                  parse_bicep_parameters "${extraFileParam}"
                  paramFiles="${paramFiles} --parameters @${extraFileParam}"
              fi

              validate "${fileName}" "${paramFiles}" "${{ github.run_id }}" "${{ github.event.inputs.location }}" "rg-validate"
              code=$?
              if [[ $code != 0 ]]; then
                echo "bicep lint failed - returned code ${code}"
                exit $code
              fi
              popd
              echo "------------------------"
            done
          popd
        working-directory: orchestrators/scripts

  # Validate:
  #   uses: ./.github/workflows/_workflow.main.bicep.validate.yml
  #   with:
  #     environment: "dev"

  # Preview:
  #   name: "Preview"
  #   needs: Validate
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - uses: Azure/login@v1
  #       with:
  #         creds: "${{ secrets.AZURE_CREDENTIALS }}"

  #     - uses: Azure/get-keyvault-secrets@v1
  #       with:
  #         keyvault: "kv-symphony-env"
  #         secrets: "clientid, clientsecret, subid, tenantid"
  #       id: KvSecrets

  #     - name: Run Bicep Preview
  #       run: |
  #         source ./iac.bicep.sh
  #         azlogin ${{ steps.KvSecrets.outputs.subid }} ${{ steps.KvSecrets.outputs.tenantid }} ${{ steps.KvSecrets.outputs.clientid }} ${{ steps.KvSecrets.outputs.clientsecret }} 'AzureCloud'
  #         pushd .
  #         cd ./../../IAC/Bicep/bicep
  #         modules=$(find . -type f -name 'main.bicep' | sort -u)

  #         SAVEIFS=$IFS
  #         IFS=$'\n'
  #         array=(${modules})
  #         IFS=$SAVEIFS
  #         len=${#array[@]}
  #         for deployment in "${array[@]}"
  #           do
  #             pushd .
  #             path=$(dirname "${deployment}")
  #             fileName=$(basename "${deployment}")
  #             cd "${path}"
  #             echo "bicep preview ${path}/${fileName}"

  #             extraFileParam="${{ github.workspace }}/env/bicep/${{ github.event.inputs.environment }}/${path//.\//}/parameters.json"
  #             if [[ -f "${extraFileParam}" ]]; then
  #                 paramFiles="${{ github.workspace }}/env/bicep/${{ github.event.inputs.environment }}/parameters.json @${extraFileParam}"
  #             else
  #                 paramFiles="${{ github.workspace }}/env/bicep/${{ github.event.inputs.environment }}/parameters.json"
  #             fi

  #             preview "${fileName}" "${paramFiles}" "${{ github.run_id }}" "${{ github.event.inputs.location }}"
  #             code=$?
  #             if [[ $code != 0 ]]; then
  #               echo "biceplint failed - returned code ${code}"
  #               exit $code
  #             fi
  #             popd
  #             echo "------------------------"
  #           done
  #         popd
  #       working-directory: orchestrators/scripts

  # Deploy:
  #   name: "Deploy"
  #   needs: Preview
  #   runs-on: ubuntu-latest
  #   steps:
  #     # - uses: actions/checkout@v3

  #     - name: Run script
  #       run: |
  #         echo Hello world!

  # Test:
  #   name: "Test"
  #   needs: Deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     # - uses: actions/checkout@v3

  #     - name: Run script
  #       run: |
  #         echo Hello world!

  # Report:
  #   name: "Report"
  #   needs: Test
  #   runs-on: ubuntu-latest
  #   steps:
  #     # - uses: actions/checkout@v3

  #     - name: Run script
  #       run: |
  #         echo Hello world!
