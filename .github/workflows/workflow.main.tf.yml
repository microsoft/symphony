name: "Main Terraform"

on:
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        required: true
        default: "dev"
      goVersion:
        description: "Go Version"
        required: true
        default:  "1.18.1"
      terraformVersion:
        description: "Terraform Version"
        required: true
        default:  "1.1.7"

jobs:
  Validate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Toolset
        run: |
          ./setup-azcli.sh
          ./setup-gitleaks.sh
        working-directory: orchestrators/scripts

      - name: Setup Terraform & TF Lint
        run: |
          chmod +x  ./setup-terraform.sh 
          bash  ./setup-terraform.sh ${{ github.event.inputs.terraformVersion }}
          
          chmod +x ./setup-tflint.sh
          bash ./setup-tflint.sh
        working-directory: orchestrators/scripts
        shell: bash
        
      - name: Run Gitleaks
        run: |
          source ./scanners.sh
          run_gitleaks './../../IAC/Terraform' './results/gitleaks-report' 'json' 'info'
        working-directory: orchestrators/scripts
        
      - uses: actions/upload-artifact@v2  # upload test results
        if: success() || failure()        # run this step even if previous step failed
        with:
          name: test-results
          path: ./results/gitleaks-report.json
          
      - name: Run TF Lint
        run: |
          echo 'Run tflint'             
                source ./iac.tf.sh
                pushd .
                cd ./../../IAC/Terraform/terraform
                modules=$(find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}')
                
                SAVEIFS=$IFS
                IFS=$'\n'
                array=($modules)
                IFS=$SAVEIFS
                len=${#array[@]}
                for deployment in "${array[@]}"
                  do
                    echo "linting ${deployment}"
                    pushd .
                    cd $deployment
                    lint
                    code=$?
                    if [[ $code != 0 ]]; then
                      echo "tflint failed- returned code ${code}" 
                      exit $code
                    fi
                    popd
                    echo "------------------------"
                  done
                popd
        working-directory: orchestrators/scripts
        shell: bash
