name: "Main Terraform"

on:
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        required: true
        default: "dev"
      goVersion:
        description: "Go Version"
        required: true
        default:  "1.18.1"
      terraformVersion:
        description: "Terraform Version"
        required: true
        default:  "1.1.7"
      backupstatefiles:
        description: "Run Backup State Files"
        required: true
        default:  "true"

jobs:
#  Validate:
#     name: "Validate"
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3

#       - name: Setup Toolset
#         run: |
#           ./setup-azcli.sh
#           ./setup-gitleaks.sh
#           chmod +x  ./setup-terraform.sh 
#           ./setup-terraform.sh ${{ github.event.inputs.terraformVersion }}        
#           chmod +x ./setup-tflint.sh
#           ./setup-tflint.sh
#         working-directory: orchestrators/scripts
#         shell: bash
              
        
#       - name: Run Gitleaks
#         run: |
#           mkdir results
#           source ./scanners.sh
#           run_gitleaks './../../IAC/Terraform' './results/gitleaks-report' 'json' 'info'
#         working-directory: orchestrators/scripts
        
#       - uses: actions/upload-artifact@v2  # upload test results
#         if: success() || failure()        # run this step even if previous step failed
#         with:
#           name: test-results
#           path: ./IAC/Terraform/results/gitleaks-report.json
 

#       - name: Run TF Lint
#         run: |
#           chmod +x ./iac.tf.lint.sh
#           ./iac.tf.lint.sh
#         working-directory: orchestrators/scripts
#         shell: bash

#       - uses: Azure/login@v1
#         name: Run Azure Login
#         with:
#           creds: "${{ secrets.AZURE_CREDENTIALS }}"

#       - uses: Azure/get-keyvault-secrets@v1
#         name: Get KeyVault Secrets
#         with:
#           keyvault: "kv-symphony-env"
#           secrets: "clientid, clientsecret, subid, tenantid, staterg, statecontainer, statestorageaccount"
#         id: KvSecrets

#       - name: Run TF Validate
#         env:
#           SUBID: ${{ steps.KvSecrets.outputs.subid }}
#           TENANTID: ${{ steps.KvSecrets.outputs.tenantid }}
#           CLIENTID: ${{ steps.KvSecrets.outputs.clientid }}
#           CLIENTSECRET: ${{ steps.KvSecrets.outputs.clientsecret }}
#           STATESTORAGEACCOUNT: ${{ steps.KvSecrets.outputs.statestorageaccount }}
#           STATECONTAINER: ${{ steps.KvSecrets.outputs.statecontainer }}
#           STATERG: ${{ steps.KvSecrets.outputs.staterg }}
#           ENV: ${{ github.event.inputs.environment }}
#         run: |
#           source ./iac.tf.sh
#           pushd .
#           cd ./../../IAC/Terraform/terraform
#           modules=$(find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}')
          
#           SAVEIFS=$IFS
#           IFS=$'\n'
#           array=($modules)
#           IFS=$SAVEIFS
#           len=${#array[@]}
#           echo "Az login"
#           azlogin "${SUBID}" "${TENANTID}" "$CLIENTID" "$CLIENTSECRET" 'AzureCloud'
#           for deployment in "${array[@]}"
#             do
#               if [[ ${deployment} != *"01_init"* ]]; then
#                 echo "tf init ${deployment}"
#                 pushd .
#                 cd $deployment
#                 init true "${ENV}${deployment}.tfstate" "${SUBID}" "${TENANTID}" "${CLIENTID}" "${CLIENTSECRET}" "${STATESTORAGEACCOUNT}" "${STATECONTAINER}" "${STATERG}"
#                 echo "tf init ${deployment}"
#                 echo "tf validate ${deployment}"
#                validate
#                 code=$?
#                 if [[ $code != 0 ]]; then
#                   echo "terraform validate - returned code ${code}" 
#                   exit $code
#                 fi
#                 popd

#               fi
#             done
#           popd
#         working-directory: orchestrators/scripts
#         shell: bash
      
#       - uses: actions/setup-go@v3
#         with:
#           go-version: ${{ github.event.inputs.goVersion }}
#       - name: Run Modules Tests
#         env:
#           SUBID: ${{ steps.KvSecrets.outputs.subid }}
#           TENANTID: ${{ steps.KvSecrets.outputs.tenantid }}
#           CLIENTID: ${{ steps.KvSecrets.outputs.clientid }}
#           CLIENTSECRET: ${{ steps.KvSecrets.outputs.clientsecret }}
#           STATESTORAGEACCOUNT: ${{ steps.KvSecrets.outputs.statestorageaccount }}
#           STATECONTAINER: ${{ steps.KvSecrets.outputs.statecontainer }}
#           STATERG: ${{ steps.KvSecrets.outputs.staterg }}
#           ENV: ${{ github.event.inputs.environment }}
#         run: |
#           source ./tests.runner.sh
#           azlogin "${SUBID}" "${TENANTID}" "$CLIENTID" "$CLIENTSECRET" 'AzureCloud'
          
#           #install junit 
#           echo "install go-junit-report"
#           go install github.com/jstemmer/go-junit-report@latest
#           # set test vars
#           export resource_group_name="${STATERG}"
#           export storage_account_name="${STATESTORAGEACCOUNT}"
#           export container_name="${STATECONTAINER}"

#           pushd .          
#           cd ./../../IAC/Terraform/test/terraform
#           echo "Run tests with tag = module_tests"
#           terraform module_test true        
#           popd

#         working-directory: orchestrators/scripts
#         shell: bash

#       - uses: actions/upload-artifact@v2  # upload test results
#         if: success() || failure()        # run this step even if previous step failed
#         with:
#           name: Modules test results
#           path: ./IAC/Terraform/test/terraform/*.xml
      
#       - name: Publish Module Test Results
#         uses: EnricoMi/publish-unit-test-result-action@v1
#         if: always()
#         with:
#           files: "./IAC/Terraform/test/terraform/*.xml"

  PreviewDeploy:
    name: "Preview and Deploy"    
#    needs: Validate
    
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Toolset
        run: |
          ./setup-azcli.sh
          chmod +x  ./setup-terraform.sh
          ./setup-terraform.sh ${{ github.event.inputs.terraformVersion }}
        working-directory: orchestrators/scripts
        shell: bash       

      - uses: Azure/login@v1
        name: Run Azure Login
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"

      - uses: Azure/get-keyvault-secrets@v1
        name: Get KeyVault Secrets
        with:
          keyvault: "kv-symphony-env"
          secrets: "clientid, clientsecret, subid, tenantid, staterg, statecontainer, statestorageaccount"
        id: KvSecrets

      - name: Run TF plan- Apply
        env:
          SUBID: ${{ steps.KvSecrets.outputs.subid }}
          TENANTID: ${{ steps.KvSecrets.outputs.tenantid }}
          CLIENTID: ${{ steps.KvSecrets.outputs.clientid }}
          CLIENTSECRET: ${{ steps.KvSecrets.outputs.clientsecret }}
          STATESTORAGEACCOUNT: ${{ steps.KvSecrets.outputs.statestorageaccount }}
          STATECONTAINER: ${{ steps.KvSecrets.outputs.statecontainer }}
          STATERG: ${{ steps.KvSecrets.outputs.staterg }}
          ENV: ${{ github.event.inputs.environment }}
        run: |
          source ./iac.tf.sh
          pushd .
          cd ./../../IAC/Terraform/terraform
          modules=$(find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}')
          
          SAVEIFS=$IFS
          IFS=$'\n'
          array=($modules)
          IFS=$SAVEIFS
          len=${#array[@]}
          echo "Az login"
          azlogin "${SUBID}" "${TENANTID}" "$CLIENTID" "$CLIENTSECRET" 'AzureCloud'
          for deployment in "${array[@]}"
            do
              if [[ ${deployment} != *"01_init"* ]]; then
                echo "tf init ${deployment}"
                pushd .
                cd $deployment
                init true "${ENV}${deployment}.tfstate" "${SUBID}" "${TENANTID}" "${CLIENTID}" "${CLIENTSECRET}" "${STATESTORAGEACCOUNT}" "${STATECONTAINER}" "${STATERG}"
                # Preview deployment
                envfile=${deployment/'./'/''}
                envfile=${envfile/'/'/'_'}                      
                preview "terraform.tfplan" "./../../../../../env/terraform/${ENV}/${envfile}.tfvars.json"
                code=$?

                echo "----------------plan code-------------"
                echo $code
                if [[ $code != 0 ]]; then
                  echo "terraform plan - returned code ${code}" 
                  exit $code
                fi
                
                # Check for resources destruction

                echo " ---------------- Check for resources destruction"
                #terraform show -no-color -json "terraform.tfplan" >mytmp.json
                #3actions1=$(cat mytmp.json)
                #echo "actions1 -- $actions1"
                #actions2=$(echo $actions1 | jq '.resource_changes[].change.actions[]' )
                #echo "actions2 -- $actions2"
                #actions3=$(echo $actions2 | (grep -c 'delete' || true;))
                #echo "actions3 -- $actions3"

                #if [[ $actions3 == 0 ]]; then
                #    _information "Plan file "terraform.tfplan" has no delete changes"
                #else
                #    _warning "Plan file "terraform.tfplan" has delete changes"
                #fi

                echo " ---------------- Check for resources destruction --2 "

                detect_destroy "terraform.tfplan"
                # Apply deployment
                deploy "terraform.tfplan"
                code=$?
                if [[ $code != 0 ]]; then
                  echo "terraform apply - returned code ${code}" 
                  exit $code
                fi
                popd

              fi
            done
          popd
        working-directory: orchestrators/scripts
        shell: bash

  Test:
    name: "Test"
    needs: PreviewDeploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Toolset
        run: |
          ./setup-azcli.sh
          chmod +x  ./setup-terraform.sh 
          ./setup-terraform.sh ${{ github.event.inputs.terraformVersion }}
        working-directory: orchestrators/scripts
        shell: bash       

      - uses: Azure/login@v1
        name: Run Azure Login
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"

      - uses: Azure/get-keyvault-secrets@v1
        name: Get KeyVault Secrets
        with:
          keyvault: "kv-symphony-env"
          secrets: "clientid, clientsecret, subid, tenantid, staterg, statecontainer, statestorageaccount"
        id: KvSecrets

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ github.event.inputs.goVersion }}
      - name: Run Modules Tests
        env:
          SUBID: ${{ steps.KvSecrets.outputs.subid }}
          TENANTID: ${{ steps.KvSecrets.outputs.tenantid }}
          CLIENTID: ${{ steps.KvSecrets.outputs.clientid }}
          CLIENTSECRET: ${{ steps.KvSecrets.outputs.clientsecret }}
          STATESTORAGEACCOUNT: ${{ steps.KvSecrets.outputs.statestorageaccount }}
          STATECONTAINER: ${{ steps.KvSecrets.outputs.statecontainer }}
          STATERG: ${{ steps.KvSecrets.outputs.staterg }}
          ENV: ${{ github.event.inputs.environment }}
        run: |
          source ./tests.runner.sh
          azlogin "${SUBID}" "${TENANTID}" "$CLIENTID" "$CLIENTSECRET" 'AzureCloud'
          
          #install junit 
          echo "install go-junit-report"
          go install github.com/jstemmer/go-junit-report@latest

          # set test vars
          export resource_group_name="${STATERG}"
          export storage_account_name="${STATESTORAGEACCOUNT}"
          export container_name="${STATECONTAINER}"

          pushd .
          
          cd ./../../IAC/Terraform/test/terraform
          echo "Run tests with tag = e2e_test"
          terraform e2e_test true        
          popd

        working-directory: orchestrators/scripts
        shell: bash

      - uses: actions/upload-artifact@v2  
        if: success() || failure()
        with:
          name: End to End Test results
          path: ./IAC/Terraform/test/terraform/*.xml
      
      - name: Publish End to End Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: "./IAC/Terraform/test/terraform/*.xml"

  Report:
    name: "Report"
    needs: Test
    if: ${{ github.event.inputs.backupstatefiles == 'true' }} 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Toolset
        run: |
          ./setup-azcli.sh
          chmod +x  ./setup-terraform.sh 

        working-directory: orchestrators/scripts
        shell: bash

      - uses: Azure/login@v1
        name: Run Azure Login
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"

      - uses: Azure/get-keyvault-secrets@v1
        name: Get KeyVault Secrets
        with:
          keyvault: "kv-symphony-env"
          secrets: "backupstatestorageaccount, clientid, clientsecret, subid, tenantid, staterg, statecontainer, statestorageaccount  "
        id: KvSecrets

      - name: Backup Remote State
        env:
          SUBID: ${{ steps.KvSecrets.outputs.subid }}
          BACKUPSTATESTORAGEACCOUNT: ${{ steps.KvSecrets.outputs.backupstatestorageaccount }}
          TENANTID: ${{ steps.KvSecrets.outputs.tenantid }}
          CLIENTID: ${{ steps.KvSecrets.outputs.clientid }}
          CLIENTSECRET: ${{ steps.KvSecrets.outputs.clientsecret }}
          STATESTORAGEACCOUNT: ${{ steps.KvSecrets.outputs.statestorageaccount }}
          STATECONTAINER: ${{ steps.KvSecrets.outputs.statecontainer }}
          STATERG: ${{ steps.KvSecrets.outputs.staterg }}       
          ENV: ${{ github.event.inputs.environment }}
        run: |
          source ./iac.tf.sh
          azlogin $SUBID $TENANTID $CLIENTID $CLIENTSECRET 'AzureCloud'
          
          echo "Starting backup of $ENV environment remote state.  Commit: ${{ github.sha }} }"

          # Create backup container name and convert to lower case
          backupContainerName=`echo ${{ github.head_ref }}-${{ github.sha }} | tr '[:upper:]' '[:lower:]'`
          backupResourceGroup=`az storage account list --query "[?name=='$BACKUPSTATESTORAGEACCOUNT'].resourceGroup" -o tsv`      

          sourceEndPoint=`az storage account list -g $STATERG --query "[?name=='$STATESTORAGEACCOUNT'].{endpointName:primaryEndpoints.blob}" -o tsv`
          backupEndpoint=`az storage account list -g $backupResourceGroup --query "[?name=='$BACKUPSTATESTORAGEACCOUNT'].{endpointName:primaryEndpoints.blob}" -o tsv`
  
          echo "Copying remote state to container ${backupContainerName} in storage account $BACKUPSTATESTORAGEACCOUNT located in resource group ${backupResourceGroup}"
          az storage copy -s ${sourceEndPoint}$STATECONTAINER/${ENV}/* -d ${backupEndpoint}$STATECONTAINER/${ENV}/${backupContainerName} --recursive
        working-directory: orchestrators/scripts
        shell: bash