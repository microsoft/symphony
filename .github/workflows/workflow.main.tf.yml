name: "Main Terraform"

on:
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        required: true
        default: "dev"
      goVersion:
        description: "Go Version"
        required: true
        default:  "1.18.1"
      terraformVersion:
        description: "Terraform Version"
        required: true
        default:  "1.1.7"
      backupstatefiles:
        description: "Run Backup State Files"
        required: true
        default:  "true"

jobs:
  Validate:
    uses: ./.github/workflows/tf_validate.yml
    with:
        environment: ${{ github.event.inputs.environment }}
        terraformVersion: ${{ github.event.inputs.terraformVersion }}
        goVersion: ${{ github.event.inputs.goVersion }}
        runLayerTest: false
        branch: main
    secrets:
        azEnvCred: ${{ secrets.AZURE_CREDENTIALS }}
    
  PreviewDeploy:
    uses: ./.github/workflows/tf_previewdeploy.yml
    needs: Validate
    with:
        environment: ${{ github.event.inputs.environment }}
        terraformVersion: ${{ github.event.inputs.terraformVersion }}
    secrets:
        azEnvCred: ${{ secrets.AZURE_CREDENTIALS }}

  Test:
    uses: ./.github/workflows/tf_test.yml
    needs: PreviewDeploy
    with:
        environment: ${{ github.event.inputs.environment }}
        terraformVersion: ${{ github.event.inputs.terraformVersion }}
        goVersion: ${{ github.event.inputs.goVersion }}
    secrets:
        azEnvCred: ${{ secrets.AZURE_CREDENTIALS }}
    
  Report:
    uses: ./.github/workflows/tf_report.yml
    needs: PreviewDeploy
    with:
        environment: ${{ github.event.inputs.environment }}
    secrets:
        azEnvCred: ${{ secrets.AZURE_CREDENTIALS }}
    if: ${{ github.event.inputs.backupstatefiles == 'true' }}
    # name: "Report"
    # needs: PreviewDeploy
    # if: ${{ github.event.inputs.backupstatefiles == 'true' }} 
    # runs-on: ubuntu-latest
    # steps:
    #   - uses: actions/checkout@v3

    #   - name: Setup Toolset
    #     run: |
    #       ./setup-azcli.sh
    #       chmod +x  ./setup-terraform.sh 

    #     working-directory: orchestrators/scripts
    #     shell: bash

    #   - uses: Azure/login@v1
    #     name: Run Azure Login
    #     with:
    #       creds: "${{ secrets.AZURE_CREDENTIALS }}"

    #   - uses: Azure/get-keyvault-secrets@v1
    #     name: Get KeyVault Secrets
    #     with:
    #       keyvault: "kv-symphony-env"
    #       secrets: "backupstatestorageaccount, clientid, clientsecret, subid, tenantid, staterg, statecontainer, statestorageaccount  "
    #     id: KvSecrets

    #   - name: Backup Remote State
    #     env:
    #       SUBID: ${{ steps.KvSecrets.outputs.subid }}
    #       BACKUPSTATESTORAGEACCOUNT: ${{ steps.KvSecrets.outputs.backupstatestorageaccount }}
    #       TENANTID: ${{ steps.KvSecrets.outputs.tenantid }}
    #       CLIENTID: ${{ steps.KvSecrets.outputs.clientid }}
    #       CLIENTSECRET: ${{ steps.KvSecrets.outputs.clientsecret }}
    #       STATESTORAGEACCOUNT: ${{ steps.KvSecrets.outputs.statestorageaccount }}
    #       STATECONTAINER: ${{ steps.KvSecrets.outputs.statecontainer }}
    #       STATERG: ${{ steps.KvSecrets.outputs.staterg }}       
    #       ENV: ${{ github.event.inputs.environment }}
    #     run: |
    #       source ./iac.tf.sh
    #       azlogin $SUBID $TENANTID $CLIENTID $CLIENTSECRET 'AzureCloud'
          
    #       echo "Starting backup of $ENV environment remote state.  Commit: ${{ github.sha }} }"

    #       # Create backup container name and convert to lower case
    #       backupContainerName=`echo ${{ github.head_ref }}-${{ github.sha }} | tr '[:upper:]' '[:lower:]'`
    #       backupResourceGroup=`az storage account list --query "[?name=='$BACKUPSTATESTORAGEACCOUNT'].resourceGroup" -o tsv`      

    #       sourceEndPoint=`az storage account list -g $STATERG --query "[?name=='$STATESTORAGEACCOUNT'].{endpointName:primaryEndpoints.blob}" -o tsv`
    #       backupEndpoint=`az storage account list -g $backupResourceGroup --query "[?name=='$BACKUPSTATESTORAGEACCOUNT'].{endpointName:primaryEndpoints.blob}" -o tsv`
  
    #       echo "Copying remote state to container ${backupContainerName} in storage account $BACKUPSTATESTORAGEACCOUNT located in resource group ${backupResourceGroup}"
    #       az storage copy -s ${sourceEndPoint}$STATECONTAINER/${ENV}/* -d ${backupEndpoint}$STATECONTAINER/${ENV}/${backupContainerName} --recursive
    #     working-directory: orchestrators/scripts
    #     shell: bash