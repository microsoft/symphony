name: "Template-TF-Report"
on:
  workflow_call:
    inputs:
      environment:
        description: "environmentName"
        required: true
        type: string
        default: "dev"
      branch:
        description: "Branch Name"
        required: true
        type: string
        default: "main"
    secrets:
      azEnvCred:
        required: true

jobs:
  Report:
    name: "Report"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: Setup Toolset
        run: |
          ./setup-azcli.sh

        working-directory: orchestrators/scripts
        shell: bash

      - uses: Azure/login@v1
        name: Run Azure Login
        with:
          creds: "${{ secrets.azEnvCred }}"

      - uses: Azure/get-keyvault-secrets@v1
        name: Get KeyVault Secrets
        with:
          keyvault: "kv-symphony-env"
          secrets: "backupstatestorageaccount, clientid, clientsecret, subid, tenantid, staterg, statecontainer, statestorageaccount  "
        id: kvSecrets

      - name: Backup Remote State
        env:
          SUBID: ${{ steps.kvSecrets.outputs.subscriptionId }}
          STATE_STORAGE_ACCOUNT_BACKUP: ${{ steps.kvSecrets.outputs.backupstatestorageaccount }}
          TENANTID: ${{ steps.kvSecrets.outputs.tenantId }}
          CLIENTID: ${{ steps.kvSecrets.outputs.clientId }}
          CLIENTSECRET: ${{ steps.kvSecrets.outputs.clientSecret }}
          STATE_STORAGE_ACCOUNT: ${{ steps.kvSecrets.outputs.statestorageaccount }}
          STATE_CONTAINER: ${{ steps.kvSecrets.outputs.statecontainer }}
          STATE_RG: ${{ steps.kvSecrets.outputs.staterg }}
          ENVIRONMENT_NAME: ${{ inputs.environmentName }}
        run: |
          source ./iac.tf.sh
          azlogin $SUBID $TENANTID $CLIENTID $CLIENTSECRET 'AzureCloud'

          echo "Starting backup of $ENV environment remote state.  Commit: ${{ github.sha }} }"

          # Create backup container name and convert to lower case
          backupContainerName=`echo ${{ github.head_ref }}-${{ github.sha }} | tr '[:upper:]' '[:lower:]'`
          backupResourceGroup=`az storage account list --query "[?name=='$STATE_STORAGE_ACCOUNT_BACKUP'].resourceGroup" -o tsv`      

          sourceEndPoint=`az storage account list -g $STATE_RG --query "[?name=='$STATE_STORAGE_ACCOUNT'].{endpointName:primaryEndpoints.blob}" -o tsv`
          backupEndpoint=`az storage account list -g $backupResourceGroup --query "[?name=='$STATE_STORAGE_ACCOUNT_BACKUP'].{endpointName:primaryEndpoints.blob}" -o tsv`

          echo "Copying remote state to container ${backupContainerName} in storage account $STATE_STORAGE_ACCOUNT_BACKUP located in resource group ${backupResourceGroup}"
          az storage copy -s ${sourceEndPoint}$STATE_CONTAINER/${ENV}/* -d ${backupEndpoint}$STATE_CONTAINER/${ENV}/${backupContainerName} --recursive
        working-directory: orchestrators/scripts
        shell: bash
