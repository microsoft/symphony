resources:
  repositories:
  - repository: symphony
    name: microsoft/symphony
    type: github
    ref: enpolat/azure-devops-ci-bicep
    endpoint: Symphony2

name: $(BuildDefinitionName).$(DayOfYear)$(Rev:.r)

trigger:
  - none

pr:
  - none

pool:
  vmImage: "ubuntu-latest"

jobs:
  - job: Validate
    displayName: "Validate"
    steps:
      - checkout: symphony

      - task: Bash@3
        displayName: "Install Azure CLI"
        inputs:
          filePath: 'orchestrators/scripts/setup-azcli.sh'
          workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          bashEnvValue: '~/.profile'
          failOnStderr: true

      - task: Bash@3
        displayName: "Install gitleaks"
        inputs:
          filePath: 'orchestrators/scripts/setup-gitleaks.sh'
          workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          bashEnvValue: '~/.profile'
          failOnStderr: true

      - task: AzureKeyVault@2
        inputs:
          azureSubscription: 'Symphony-kv2'
          KeyVaultName: 'kv-symphony-env'
          SecretsFilter: '*'
          RunAsPreJob: true

      - task: Bash@3
        displayName: "Run gitleaks"
        inputs:
          workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          targetType: 'inline'
          script: | 
            echo 'create ./results directory'
            mkdir results

            source ./scanners.sh
            run_gitleaks './../../IAC/Bicep' './results/gitleaks-report' 'json' 'info' 

      - task: Bash@3
        displayName: "Run linter"
        inputs:
          workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          targetType: 'inline'
          script: |
            source ./iac.bicep.sh
            pushd .
            cd ./../../IAC/Bicep/bicep
            modules=$(find . -type f -name '*.bicep' | sort -u)

            SAVEIFS=$IFS
            IFS=$'\n'
            array=($modules)
            IFS=$SAVEIFS
            len=${#array[@]}
            for deployment in "${array[@]}"
              do
                echo "linting ${deployment}"
                lint "${deployment}"
                code=$?
                if [[ $code != 0 ]]; then
                  echo "bicep linting failed- returned code ${code}"
                  exit $code
                fi
                echo "------------------------"
              done
            popd

      - task: Bash@3
        displayName: "Run bicep validate"
        inputs:
          workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          targetType: 'inline'
          script: |
            source ./iac.bicep.sh
            azlogin $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) 'AzureCloud'
            pushd .
            cd ./../../IAC/Bicep/bicep
            modules=$(find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}')

            SAVEIFS=$IFS
            IFS=$'\n'
            array=($modules)
            IFS=$SAVEIFS
            len=${#array[@]}
            for deployment in "${array[@]}"
              do
                if [[ ${deployment} != *"01_init"* ]]; then
                  echo "bicep init ${deployment}"
                  pushd .
                  cd $deployment
                  init "true" $deployment $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET)
                  echo "bicep init ${deployment}"
                  echo "bicep validate ${deployment}"
                  validate
                  code=$?
                  if [[ $code != 0 ]]; then
                    echo "biceplint failed- returned code ${code}" 
                    exit $code
                  fi
                  popd
                  echo "------------------------"
                fi
              done
            popd
