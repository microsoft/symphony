parameters:  
  - name: goVersion
    type: string
    default: '1.18.1'
  - name: terraformVersion
    type: string
    default: '1.1.7'

jobs:
  - job: preview
    workspace:
      clean:  resources       
    displayName: "Preivew & Deploy"
    dependsOn: validate
       #condition: eq('false', 'true')

    steps:
      - checkout: Symphony 
    
      - task: Bash@3
        displayName: "Install Terraform"
        inputs:
          filePath: 'orchestrators/scripts/setup-terraform.sh'
          workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          arguments: ${{ parameters.terraformVersion }}
          bashEnvValue: '~/.profile'
          failOnStderr: true
    
      - task: GoTool@0
        inputs:
          version: ${{ parameters.goVersion }}
          goBin: "$(System.DefaultWorkingDirectory)"

    #- task: Bash@3
    #  displayName: "Install Go"
    #  inputs:
    #    targetType: "inline"
    #    workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
    #    script: |
    #      pushd .
    #      cd orchestrators/scripts
    #      ./setup-go.sh "1.18.1" "usr/local/go" "$(System.DefaultWorkingDirectory)"
    #      popd

      - script: echo '##vso[task.prependpath]$(System.DefaultWorkingDirectory)'
    
      - task: AzureKeyVault@2
        displayName: "Pull env cred from Azure Key valut"
        inputs:
          azureSubscription: 'Symphony-kv2' #'Symphony-kv'#$(SUBID)
          KeyVaultName: 'kv-symphony-env'
          SecretsFilter: '*'
          RunAsPreJob: true

      - task: Bash@3
        displayName: "Run Terraform plan & Apply"
        inputs:
          workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          targetType: 'inline'
          script: |         
            source ./iac.tf.sh
            pushd .

            cd ./../../IAC/Terraform/terraform
            modules=$(find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}')
            
            SAVEIFS=$IFS
            IFS=$'\n' sorted=($(sort <<<"${array[*]}")); 

            array=($modules)
            IFS=$SAVEIFS
            len=${#array[@]}

            echo "Az login"

            azlogin $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) 'AzureCloud'
            for deployment in "${array[@]}"
              do
                if [[ ${deployment} != *"01_init"* ]]; then
                  pushd .
                  cd $deployment

                  # Init deployment
                  init true "$(ENV)${deployment}.tfstate" $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) $(STATESTORAGEACCOUNT) $(STATECONTAINER) $(STATERG)
                  

                  # Preview deployment
                  envfile=${deployment/'./'/''}
                  envfile=${envfile/'/'/'_'}                      
                  preview "terraform.tfplan" "./../../../../../env/terraform/$(ENV)/${envfile}.tfvars.json"

                  code=$?
                  if [[ $code != 0 ]]; then
                    echo "terraform plan - returned code ${code}" 
                    exit $code
                  fi
                  
                  # Check for resources destruction 
                  detect_destroy "terraform.tfplan"

                  # Apply deployment
                  deploy "terraform.tfplan"

                  code=$?
                  if [[ $code != 0 ]]; then
                    echo "terraform apply - returned code ${code}" 
                    exit $code
                  fi
                  popd
                  echo "------------------------"
                fi
              done
            popd