
resources:
  repositories:
  - repository: Symphony
    type: github
    endpoint: Symphony2
    name: microsoft/symphony
    ref: add_azdo_ci_tf #main

name: $(BuildDefinitionName).$(DayOfYear)$(Rev:.r)

trigger:
  - none

pr:
  - none

pool:
  vmImage: "ubuntu-latest"

variables:
  - name: workDir
    value: "$(System.DefaultWorkingDirectory)/IAC/Terraform//terraform"
  - name: runTfValidation
    value: true
  - name: runTfLint
    value: true
  - name: runTfPlan
    value: true
  - name: runTfDestroy
    value: true
  - name: runTfApply
    value: true
  - name: runUnitTest
    value: true
  - name: runIntegrationTest
    value: true

#============================================================
# The following Variables Should Be Set On the Pipeline
#============================================================
  - name: env
    value: "dev"

stages:
 - stage: Validate
   displayName: "Validate Configuration"
   jobs:
      - job: validate
        workspace:
          clean:  resources       
        displayName: "Validate"
        #condition: eq('false', 'true')
        #variables:
          #deployments: $[ dependencies.gitDiff.outputs['gitDiff.DEPLOYMENTS'] ]
        steps:
          - checkout: Symphony 
          
          - task: Bash@3
            displayName: "Install Terraform"
            inputs:
              filePath: 'orchestrators/scripts/setup-terraform.sh'
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              arguments: "1.1.7"
              bashEnvValue: '~/.profile'
              failOnStderr: true
          
          - task: Bash@3
            displayName: "Install Tflint"
            inputs:
              filePath: 'orchestrators/scripts/setup-tflint.sh'
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              bashEnvValue: '~/.profile'
              failOnStderr: true

          - task: Bash@3
            displayName: "Install gitleaks"
            inputs:
              filePath: 'orchestrators/scripts/setup-gitleaks.sh'
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              bashEnvValue: '~/.profile'
              failOnStderr: true

          #- task: Bash@3
          #  displayName: "Install Go"
          #  inputs:
          #    filePath: 'orchestrators/scripts/setup-go.sh'
          #    workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          #    arguments: "1.16.14"
          #    bashEnvValue: '~/.profile'
          #    failOnStderr: true
          
          #- task: Bash@3
          #  displayName: "Install Go"
          #  inputs:
          #    targetType: "inline"
          #    workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          #    script: |
          #      ls
          #      pushd .
          #      cd orchestrators/scripts
          #      ./setup-go.sh "1.16.14"
          #      popd
          
          - task: GoTool@0
            inputs:
              version: '1.18.1'
              goBin: "$(System.DefaultWorkingDirectory)"

          - script: echo '##vso[task.prependpath]$(System.DefaultWorkingDirectory)'
          
          - task: Bash@3
            displayName: "Run gitleaks"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: | 
                echo 'create ./results directory'
                mkdir results

                source ./scanners.sh
                run_gitleaks './../../IAC/Terraform' './results/gitleaks-report' 'json' 'info' 
          - task: PublishTestResults@2
            displayName: "Publish Gitleaks results"
            inputs:
              testResultsFiles: "*.json"
              searchFolder: "$(System.DefaultWorkingDirectory)/IAC/Terraform/results"
              failTaskOnFailedTests: true
              testRunTitle: "Gitleask report"
              mergeTestResults: true 

          - task: Bash@3
            displayName: "Run Terraform lint"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: | 
                echo 'Run tflint'             
                source ./iac.tf.sh
                pushd .

                cd ./../../IAC/Terraform/terraform/test
                modules=$(find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}')
                
                SAVEIFS=$IFS
                IFS=$'\n'

                array=($modules)
                IFS=$SAVEIFS
                len=${#array[@]}

                for deployment in "${array[@]}"
                  do
                    echo "linting ${deployment}"
                    pushd .
                    cd $deployment

                    lint
                    code=$?
                    if [[ $code != 0 ]]; then
                      echo "tflint failed- returned code ${code}" 
                      exit $code
                    fi
                    popd
                    echo "------------------------"
                  done
                popd

          - task: AzureKeyVault@2
            displayName: "Pull env cred from Azure Key valut"
            inputs:
              azureSubscription: 'Symphony-kv2' #'Symphony-kv'#$(SUBID)
              KeyVaultName: 'kv-symphony-env'
              SecretsFilter: '*'
              RunAsPreJob: true

          - task: Bash@3
            displayName: "Run Terraform validate"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: |         
                source ./iac.tf.sh
                pushd .

                cd ./../../IAC/Terraform/terraform
                modules=$(find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}')
                
                SAVEIFS=$IFS
                IFS=$'\n'

                array=($modules)
                IFS=$SAVEIFS
                len=${#array[@]}

                echo "Az login"

                azlogin $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) 'AzureCloud'
                for deployment in "${array[@]}"
                  do
                    if [[ ${deployment} != *"01_init"* ]]; then
                      echo "tf init ${deployment}"
                      pushd .
                      cd $deployment

                      init true "${deployment}.tfstate" $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) $(STATESTORAGEACCOUNT) $(STATECONTAINER) $(STATERG)
                      echo "tf init ${deployment}"
                      echo "tf validate ${deployment}"
                      validate
                      code=$?
                      if [[ $code != 0 ]]; then
                        echo "terraform validate - returned code ${code}" 
                        exit $code
                      fi
                      popd
                      echo "------------------------"
                    fi
                  done
                popd

          - task: Bash@3
            displayName: "Run Modules tests"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: |         
                source ./tests.runner.sh
                azlogin $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) 'AzureCloud'
                
                #install junit 
                echo "install go-junit-report"
                go install github.com/jstemmer/go-junit-report@latest

                # set test vars
                export resource_group_name=$(STATERG)
                export storage_account_name=$(STATESTORAGEACCOUNT) 
                export container_name=$(STATECONTAINER)

                pushd .
                echo 'get tests list'
                cd ./../../IAC/Terraform/test/terraform
          
                tests=$(find . -type f -name '*unit_test.go' -print)
                echo $tests

                SAVEIFS=$IFS
                IFS=$'\n'

                array=($tests)
                IFS=$SAVEIFS
                len=${#array[@]}
                
                for test in "${array[@]}"
                  do
                    if [[ ${test} != *"01_init"* ]]; then
                      echo "Test name  ${test}" 
                      terraform ${test/'./'/''}
                    fi
                  done
                popd

          - task: PublishTestResults@2
            displayName: "Publish modules unit test results"
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "*.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)/IAC/Terraform/test/terraform"
              failTaskOnFailedTests: true # TEMP true
              testRunTitle: "Terraform Modules unit tests"
              publishRunAttachments: true
              mergeTestResults: true


      - job: preview
        workspace:
          clean:  resources       
        displayName: "Preivew & Deploy"
        dependsOn: validate
        #condition: eq('false', 'true')

        steps:
          - checkout: Symphony 
          
          - task: Bash@3
            displayName: "Install Terraform"
            inputs:
              filePath: 'orchestrators/scripts/setup-terraform.sh'
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              arguments: "1.1.7"
              bashEnvValue: '~/.profile'
              failOnStderr: true
          
          - task: GoTool@0
            inputs:
              version: '1.18.1'
              goBin: "$(System.DefaultWorkingDirectory)"

          - script: echo '##vso[task.prependpath]$(System.DefaultWorkingDirectory)'
          
          - task: AzureKeyVault@2
            displayName: "Pull env cred from Azure Key valut"
            inputs:
              azureSubscription: 'Symphony-kv2' #'Symphony-kv'#$(SUBID)
              KeyVaultName: 'kv-symphony-env'
              SecretsFilter: '*'
              RunAsPreJob: true

          - task: Bash@3
            displayName: "Run Terraform plan"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: |         
                source ./iac.tf.sh
                pushd .

                cd ./../../IAC/Terraform/terraform
                modules=$(find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}')
                
                SAVEIFS=$IFS
                IFS=$'\n' sorted=($(sort <<<"${array[*]}")); 

                array=($modules)
                IFS=$SAVEIFS
                len=${#array[@]}

                echo "Az login"

                azlogin $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) 'AzureCloud'
                for deployment in "${array[@]}"
                  do
                    if [[ ${deployment} != *"01_init"* ]]; then
                      echo "tf init ${deployment}"
                      pushd .
                      cd $deployment

                      init true "${deployment}.tfstate" $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) $(STATESTORAGEACCOUNT) $(STATECONTAINER) $(STATERG)
                      echo "tf init ${deployment}"
                      echo "tf plan ${deployment}"
                     
                      envfile=${deployment/'./'/''}
                      envfile=${envfile/'/'/'_'}
                      echo "env file name"
                      echo "./../../../env/terraform/$(ENV)/${envfile}"
                      preview "terraform.tfplan" "./../../../../../env/terraform/$(ENV)/${envfile}.tfvars.json"

                      #check for resources destruction 
                      detect_destroy  "terraform.tfplan"

                      # Run terraform deploy

                      deploy "terraform.tfplan"

                      code=$?
                      if [[ $code != 0 ]]; then
                        echo "terraform plan - returned code ${code}" 
                        exit $code
                      fi
                      popd
                      echo "------------------------"
                    fi
                  done
                popd

      - job: test
        workspace:
          clean:  resources       
        displayName: "End to End Test"
        dependsOn: preview

        steps:
          - checkout: Symphony 

          - task: Bash@3
            displayName: "Install Terraform"
            inputs:
              filePath: 'orchestrators/scripts/setup-terraform.sh'
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              arguments: "1.1.7"
              bashEnvValue: '~/.profile'
              failOnStderr: true

          - task: GoTool@0
            inputs:
              version: '1.18.1'
              goBin: "$(System.DefaultWorkingDirectory)"

          - script: echo '##vso[task.prependpath]$(System.DefaultWorkingDirectory)'

          - task: AzureKeyVault@2
            displayName: "Pull env cred from Azure Key valut"
            inputs:
              azureSubscription: 'Symphony-kv2' #'Symphony-kv'#$(SUBID)
              KeyVaultName: 'kv-symphony-env'
              SecretsFilter: '*'
              RunAsPreJob: true
          
          - task: Bash@3
            displayName: "Run end to end tests"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: |         
                source ./tests.runner.sh
                azlogin $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) 'AzureCloud'
                
                #install junit 
                echo "install go-junit-report"
                go install github.com/jstemmer/go-junit-report@latest

                # set test vars
                export resource_group_name=$(STATERG)
                export storage_account_name=$(STATESTORAGEACCOUNT) 
                export container_name=$(STATECONTAINER)

                pushd .
                echo 'get tests list'
                cd ./../../IAC/Terraform/test/terraform

                #go test -v end_to_end_test.go

                tests=$(find . -type f -name '*end_test.go' -print)
                echo $tests

                SAVEIFS=$IFS
                IFS=$'\n'

                array=($tests)
                IFS=$SAVEIFS
                len=${#array[@]}
                
                for test in "${array[@]}"
                  do
                    if [[ ${test} != *"01_init"* ]]; then
                      echo "Test name  ${test}" 
                      terraform ${test/'./'/''}
                    fi
                  done
                popd

          - task: PublishTestResults@2
            displayName: "Publish end to end test results"
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "*.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)/IAC/Terraform/test/terraform"
              failTaskOnFailedTests: true # TEMP true
              testRunTitle: "Terraform Modules end to end tests"
              publishRunAttachments: true

          