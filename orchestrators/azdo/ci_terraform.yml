
resources:
  repositories:
  - repository: Symphony
    type: github
    endpoint: Symphony2
    name: microsoft/symphony
    ref: add_azdo_ci_tf #main

name: $(BuildDefinitionName).$(DayOfYear)$(Rev:.r)

trigger:
  - none

pr:
  - none

pool:
  vmImage: "ubuntu-latest"

variables:
  - name: env
    value: "dev"
  - name: workDir
    value: "$(System.DefaultWorkingDirectory)/IAC/Terraform//terraform"
  - name: runTfValidation
    value: true
  - name: runTfLint
    value: true
  - name: runTfPlan
    value: true
  - name: runTfDestroy
    value: true
  - name: runTfApply
    value: true
  - name: runUnitTest
    value: true
  - name: runIntegrationTest
    value: true
  - name: TfPlanPipelineFolderPath
    value: "\\infrastructure\\shared"
  - name: TfApplyPipelineFolderPath
    value: "\\infrastructure\\shared"
  - name: TfPlanPipelineName
    value: "tfplan"
  - name: TfApplyPipelineName
    value: "tfapply"


stages:
 - stage: Validate
   displayName: "Validate Configuration"
   jobs:
      - job: prepEnv
        workspace:
          clean:  resources       
        displayName: "Prep Env"
        #variables:
          #deployments: $[ dependencies.gitDiff.outputs['gitDiff.DEPLOYMENTS'] ]
        steps:
          - checkout: Symphony 
          
          - task: Bash@3
            displayName: "Install Terraform"
            inputs:
              filePath: 'orchestrators/scripts/setup-terraform.sh'
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              arguments: "1.1.7"
              bashEnvValue: '~/.profile'
              failOnStderr: true
          
          - task: Bash@3
            displayName: "Install Tflint"
            inputs:
              filePath: 'orchestrators/scripts/setup-tflint.sh'
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              bashEnvValue: '~/.profile'
              failOnStderr: true

          #- task: Bash@3
          #  displayName: "Install gitleaks"
          #  inputs:
          #    filePath: 'orchestrators/scripts/setup-gitleaks.sh'
          #    workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          #    bashEnvValue: '~/.profile'
          #    failOnStderr: true

          #- task: Bash@3
          #  displayName: "Install Go"
          #  inputs:
          #    filePath: 'orchestrators/scripts/setup-go.sh'
          #    workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          #    arguments: "1.16.14"
          #    #bashEnvValue: '~/.profile'
          #    failOnStderr: true
          
          #- task: Bash@3
          #  displayName: "Install Go"
          #  inputs:
          #    targetType: "inline"
          #    workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          #    script: |
          #        ls
          #        # pushd .
          #        # cd orchestrators/scripts
          #        ./setup-go.sh "1.16.14"
          #        # popd
          - task: GoTool@0
            inputs:
              version: '1.16.14'

          #- task: Bash@3
          #  displayName: "Run gitleaks"
          #  inputs:
          #    workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
          #    targetType: 'inline'
          #    script: | 
          #      echo 'create ./results directory'
          #      mkdir results

          #      source ./scanners.sh
          #      run_gitleaks './../../IAC/Terraform' './results/gitleaks-report' 'json' 'info' 

          - task: Bash@3
            displayName: "Run Terraform lint"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: | 
                echo 'Run tflint'             
                source ./iac.tf.sh
                pushd .

                cd ./../../IAC/Terraform/terraform
                modules=$(find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}')
                
                SAVEIFS=$IFS
                IFS=$'\n'

                array=($modules)
                IFS=$SAVEIFS
                len=${#array[@]}

                for deployment in "${array[@]}"
                        do
                          echo "linting ${deployment}"
                          pushd .
                          cd $deployment

                          lint
                          code=$?
                          if [[ $code != 0 ]]; then
                            echo "tflint failed- returned code ${code}" 
                            exit $code
                          fi
                          popd
                          echo "------------------------"
                        done
                popd

          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'Symphony-kv2' #'Symphony-kv'#$(SUBID)
              KeyVaultName: 'kv-symphony-env'
              SecretsFilter: '*'
              RunAsPreJob: true

          - task: Bash@3
            displayName: "Run Terraform validate"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: |         
                source ./iac.tf.sh
                pushd .

                cd ./../../IAC/Terraform/terraform
                modules=$(find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}')
                
                SAVEIFS=$IFS
                IFS=$'\n'

                array=($modules)
                IFS=$SAVEIFS
                len=${#array[@]}

                echo "Az login"

                azlogin $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) 'AzureCloud'
                for deployment in "${array[@]}"
                  do
                    if [[ ${deployment} != *"01_init"* ]]; then
                      echo "tf init ${deployment}"
                      pushd .
                      cd $deployment

                      init true "${deployment}" $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) $(STATESTORAGEACCOUNT) $(STATECONTAINER) $(STATERG)
                      echo "tf init ${deployment}"
                      echo "tf validate ${deployment}"
                      validate
                      code=$?
                      if [[ $code != 0 ]]; then
                        echo "tflint validate - returned code ${code}" 
                        exit $code
                      fi
                      popd
                      echo "------------------------"
                    fi
                  done
                popd

          - task: Bash@3
            displayName: "Run Modules tests"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: |         
                source ./iac.tf.sh
                azlogin $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) 'AzureCloud'
                pushd .
                # set test vars
                export resource_group_name=$(STATERG)
                export storage_account_name=$(STATESTORAGEACCOUNT) 
                export container_name=$(STATECONTAINER)

                echo "-----------------------------------------"
                echo " test resource_group_name ${resource_group_name}"
                echo "-------------------- list env -----------------"
                env
                echo "-----------------------------------------------"

                cd ./../../IAC/Terraform/test/terraform
                go test -tags=01_init -run Test01_Init_Storage
                go test -tags=02_sql -run Test02_SQL
                popd

                
                 

              