parameters:
  - name: goVersion
    type: string
    default: '1.18.1'
  - name: terraformVersion
    type: string
    default: '1.1.7'
  - name: envKVSVCName
    type: string
  - name: envKVName
    type: string
jobs:
      - job: validate
        workspace:
          clean:  resources       
        displayName: "Validate"
        #condition: eq('false', 'true')
        steps:
          - checkout: Symphony 
          
          - task: Bash@3
            displayName: "Install Terraform"
            inputs:
              filePath: 'orchestrators/scripts/setup-terraform.sh'
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              arguments:  ${{ parameters.terraformVersion }}
              bashEnvValue: '~/.profile'
              failOnStderr: true
          
          - task: Bash@3
            displayName: "Install Tflint"
            inputs:
              filePath: 'orchestrators/scripts/setup-tflint.sh'
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              bashEnvValue: '~/.profile'
              failOnStderr: true

          - task: Bash@3
            displayName: "Install gitleaks"
            inputs:
              filePath: 'orchestrators/scripts/setup-gitleaks.sh'
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              bashEnvValue: '~/.profile'
              failOnStderr: true         

          - task: GoTool@0
            inputs:
              version:  ${{ parameters.goVersion }}
              goBin: "$(System.DefaultWorkingDirectory)"

          - script: echo '##vso[task.prependpath]$(System.DefaultWorkingDirectory)'
          
          - task: Bash@3
            displayName: "Run gitleaks"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: | 
                echo 'create ./results directory'
                mkdir results

                source ./scanners.sh
                run_gitleaks './../../IAC/Terraform' './results/gitleaks-report' 'json' 'info' 
          - task: PublishTestResults@2
            displayName: "Publish Gitleaks results"
            inputs:
              testResultsFiles: "*.json"
              searchFolder: "$(System.DefaultWorkingDirectory)/IAC/Terraform/results"
              failTaskOnFailedTests: true
              testRunTitle: "Gitleask report"
              mergeTestResults: true

          - task: Bash@3
            displayName: "Run Terraform lint"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: | 
                echo 'Run tflint'             
                source ./iac.tf.sh
                pushd .

                cd ./../../IAC/Terraform/terraform
                modules=$(find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}')
                
                SAVEIFS=$IFS
                IFS=$'\n'

                array=($modules)
                IFS=$SAVEIFS
                len=${#array[@]}

                for deployment in "${array[@]}"
                  do
                    echo "linting ${deployment}"
                    pushd .
                    cd $deployment

                    lint
                    code=$?
                    if [[ $code != 0 ]]; then
                      echo "tflint failed- returned code ${code}" 
                      exit $code
                    fi
                    popd
                    echo "------------------------"
                  done
                popd

          - task: AzureKeyVault@2
            displayName: "Pull env cred from Azure Key valut"
            inputs:
              azureSubscription: ${{ parameters.envKVSVCName }}
              KeyVaultName: ${{ parameters.envKVName }}
              SecretsFilter: '*'
              RunAsPreJob: true

          - task: Bash@3
            displayName: "Run Terraform validate"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: |         
                source ./iac.tf.sh
                pushd .

                cd ./../../IAC/Terraform/terraform
                modules=$(find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}')
                
                SAVEIFS=$IFS
                IFS=$'\n'

                array=($modules)
                IFS=$SAVEIFS
                len=${#array[@]}

                echo "Az login"

                azlogin $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) 'AzureCloud'
                for deployment in "${array[@]}"
                  do
                    if [[ ${deployment} != *"01_init"* ]]; then
                      echo "tf init ${deployment}"
                      pushd .
                      cd $deployment

                      init true "$(ENV)${deployment}.tfstate" $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) $(STATESTORAGEACCOUNT) $(STATECONTAINER) $(STATERG)
                      echo "tf init ${deployment}"
                      echo "tf validate ${deployment}"
                      validate
                      code=$?
                      if [[ $code != 0 ]]; then
                        echo "terraform validate - returned code ${code}" 
                        exit $code
                      fi
                      popd
                      echo "------------------------"
                    fi
                  done
                popd

          - task: Bash@3
            displayName: "Run Modules tests"
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/orchestrators/scripts'
              targetType: 'inline'
              script: |         
                source ./tests.runner.sh
                azlogin $(SUBID) $(TENANTID) $(CLIENTID) $(CLIENTSECRET) 'AzureCloud'
                
                #install junit 
                echo "install go-junit-report"
                go install github.com/jstemmer/go-junit-report@latest

                # set test vars
                export resource_group_name=$(STATERG)
                export storage_account_name=$(STATESTORAGEACCOUNT) 
                export container_name=$(STATECONTAINER)

                pushd .
                
                cd ./../../IAC/Terraform/test/terraform
          

                echo "Run tests with tag = module_tests"
                terraform module_test true
              
                popd

          - task: PublishTestResults@2
            displayName: "Publish modules unit test results"
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "*.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)/IAC/Terraform/test/terraform"
              failTaskOnFailedTests: true
              testRunTitle: "Terraform Modules unit tests"
              publishRunAttachments: true
              mergeTestResults: true