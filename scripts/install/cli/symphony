#!/usr/bin/env bash

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
REPO_DIR=$SCRIPT_DIR/../../../


source "$SCRIPT_DIR/../../utilities/shell_logger.sh"
source "$SCRIPT_DIR/../../utilities/shell_inputs.sh"
source "$SCRIPT_DIR/../../utilities/http.sh"
source "$SCRIPT_DIR/../../utilities/json.sh" 
source "$SCRIPT_DIR/../../utilities/os.sh" 
source "$SCRIPT_DIR/../../utilities/service_principal.sh"
source "$SCRIPT_DIR/../../install/banner.sh"
source "$SCRIPT_DIR/../../install/contents.sh"

#script name
declare me=$(basename "$0")
declare ORCHESTRATOR=""
declare IACTOOL=""
declare command=""
declare sub_command=""
declare default_location="westus"
declare today="$(date '+%Y-%m-%d-%H-%M-%s')"
declare AZDO_TEMP_LOG_PATH="$REPO_DIR/.symphony/logs/$today-azdo"
declare SYMPHONY_ENV_FILE_PATH="$REPO_DIR/.symphony/symphony.json"
declare SP_CLOUD_ENVIRONMENT="AzureCloud"
declare SP_SUBSCRIPTION_NAME="Azure"
declare SYMPHONY_KV_NAME=""
declare SYMPHONY_RG_NAME=""
declare SYMPHONY_ACR_NAME=""
declare SYMPHONY_SA_STATE_NAME=""

main() {
    show_banner
    parse_args "$@"
    process_command
}

verify_az_logged_in() {
  SP_SUBSCRIPTION_ID=$(az account show | jq -r '.id')
  code=$?
  if [[ "$code" -gt 0 ]]; then
    exit $code
  fi
}

# Provision resources and service principals needed by Symphony
provision() {
    verify_az_logged_in

    _information "Deploying Symphony Dependencies"
    source scripts/install/provision.sh
    _prompt_input "Enter Location to deploy resources to" default_location
    echo ""

    local is_terraform=""
    _prompt_input "Provision for Terraform  (yes/no)?" is_terraform "true"
    echo ""
 
    if [[ "$is_terraform" == "yes" ]]; then
        deploy_dependencies "$default_location" true
    else
        deploy_dependencies "$default_location" false
    fi
}

# Destroy resources and service principals needed by Symphony. Note this is a destructive operation
destroy(){
    verify_az_logged_in

    _information "Removing Symphony Dependencies"
    source scripts/install/provision.sh

    remove_dependencies
}

configure_orchestrator() {
    verify_az_logged_in
    ORCHESTRATOR=${args[0]}      
    IACTOOL=${args[1]} 

    _validate_inputs
    code=$?
    if [[ $code -gt 0 ]]; then
        usage
        exit $code
    fi

    if [ "$ORCHESTRATOR" == "azdo" ]; then
        source "$REPO_DIR/scripts/install/providers/azdo/azdo.sh"
        mkdir -p "$AZDO_TEMP_LOG_PATH"
    else
        source "$REPO_DIR/scripts/install/providers/github/github.sh"
    fi

    # workflow
    TARGET_ROOT=$(mktemp -d)
    cp -R . "$TARGET_ROOT"

    pushd "$TARGET_ROOT" || exit
        rm -rf .git
        #Load the reader sp credentials
        loadServicePrincipalCredentials
        load_symphony_env
        printEnvironment
        load_inputs
        
        # remove unused files
        remove_yaml
        if [ "$IACTOOL" == "bicep" ]; then
            remove_tf_content
        else
            remove_bicep_content
        fi
        
        configure_repo
        configure_credentials
        
        # Update the resource names KV, ACR, RG
        git add .
        git commit -m "Initial commit"

        check_mac_os
        is_mac=$?

        # The default sed command behaves differently on macos
        sedCommand="sed -i"
        if [[ $is_mac == 0 ]]; then
            sedCommand="sed -i '' -e "
        fi
        eval "git grep -l 'kv-symphony-environments' | xargs $sedCommand \"s/kv-symphony-environments/${SYMPHONY_KV_NAME}/g\""
        eval "git grep -l 'devops-symphony-362' | xargs $sedCommand \"s/devops-symphony-362/${SYMPHONY_RG_NAME}/g\""
        eval "git grep -l 'crsymphony360' | xargs $sedCommand \"s/crsymphony360/${SYMPHONY_ACR_NAME}/g\"" 

        if [ "$IACTOOL" == "bicep" ]; then
            create_pipelines_bicep
        else
            # Update SA state Name
            eval "git grep -l 'symphonyremotestate360' | xargs $sedCommand \"s/symphonyremotestate360/${SYMPHONY_SA_STATE_NAME}/g\""
            create_pipelines_terraform
        fi

        # commit & push the code the repo
        git add .
        git commit -m "Update resource names"
        git push origin --all

        check_error_log
    popd || exit
}

pipeline() {
    case $sub_command in
        "config")
            configure_orchestrator
            ;;
        *)
            usage
            ;;
    esac
}

parse_args() {
    while (( "$#" )); do
        case "${1}" in
            provision)
                shift 1
                export command="provision"
                ;;
            destroy)
                shift 1
                export command="destroy"
                ;;
            pipeline)
                shift 1
                export command="pipeline"
                export sub_command="$1"
                shift 1
                ;;
            -h|--help)
                shift 1
                export command="help"
                usage
                ;;
            -c|--cloud)
                shift 1
                export SP_CLOUD_ENVIRONMENT="${1}"
                shift 1
                ;;
            *) # preserve positional arguments
                PARAMS+="${1} "
                shift
                ;;
        esac
    done

    args=( $PARAMS )

    if [[ -z "$command" ]]; then
        usage
    fi
}

process_command() {
    case "$command" in
        provision)
            provision
            ;;
        destroy)
            destroy
            ;;
        pipeline)
            pipeline
            ;;
    esac
}

# main
main "$@"

